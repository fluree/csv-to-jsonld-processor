****************************************
The following section has been completed
****************************************

This crate is intended to solve for the following scenario:

- A user has a set of spreadsheets / CSV files that describe a data model and a set of instance data sufficient to execute the following
    (1) production of a target JSON-LD vocabulary / data model
    (2) one or more JSON-LD documents that represent the instance data and which will use the vocabulary data to produce appropriate @context map for the instance data
- To accomplish this, the crate will also expect/require a kind of spec/manifest (written in JSON-LD) that articulates the procedures and configuration needed to work sequentially through the spreadsheets / CSV files to produce the above

This crate MUST do the following:

- Provide a CLI that can be used to execute the above process
- Take a spec/manifest file as input
- Use the manifest file to understand how to process a set of spreadsheets / CSV files. This would include...
    - information about the path(s) to the spreadsheet/CSV files
    - information about the sequence of files to be processed
    - any necessary / optional configuration for use in processing the files
- The crate would then produce the following:
    - a JSON-LD vocabulary / data model
    - one or more JSON-LD documents that represent the instance data (and which have @context maps appropriate to the vocabulary data and that can handle the instance data)

This crate SHOULD do the following:
- Provide a way to validate the spec/manifest file
- Allow configuration for `--strict`, where certain irregularities would cause a failure / exit (without --strict, the crate would just log a warning and continue)

Some technical considerations:
- Ideally, this project workspace gets configured as a lib crate and a bin crate
- The lib crate should ideally be able to compile to wasm, so that a node-based CLI can be built w/ the same functionality
    - I would like to leverage some multi-threading in the lib crate, so the wasm-targeted code would need to modify that to accommodate node's single-threaded requirements

***********************
End of compiled section
***********************

**********************
Beginning of new tasks
**********************

We have accomplished the above generally well, but are still missing some capabilities.

Take a look at test-data/manifest.jsonc (which is a copy of test-data/manifest.jsonld but with comments explaining the manifest)

Also take a look at the current sorts of outputs we see in test-data/instances.jsonld and test-data/vocabulary.jsonld. Those will give a good indication of the kind of output we are targeting.

I've provided fairly abbreviate version of all the csvs in test-data/instances/ and test-data/model/ so that you can see what the data looks like.

